defmodule Day03 do

  def part1(path) do
    [path1, path2] = input(path)
    |> Stream.map(&path/1)
    |> Stream.map(&Stream.map(&1, fn {x, y, _steps} -> {x, y} end))
    |> Enum.map(&MapSet.new/1)
    MapSet.intersection(path1, path2)
    |> MapSet.to_list()
    |> Stream.map(&distance/1)
    |> Enum.sort()
    |> Enum.drop(1)
    |> List.first()
  end

  def part2(path) do
    [m1, m2] = input(path)
    |> Enum.map(&path/1)
    |> Enum.map(&Enum.map(&1, fn {x, y, steps} -> %{{x, y} => steps} end))
    |> Enum.map(&Enum.reduce(&1, %{}, fn x, acc -> Map.merge(acc, x) end))

    MapSet.intersection(MapSet.new(Map.keys(m1)), MapSet.new(Map.keys(m2)))
    |> MapSet.to_list()
    |> Enum.map(fn {x, y} = k -> {x, y, Map.get(m1, k) + Map.get(m2, k)} end)
    |> Enum.sort_by(fn {_x, _y, size} -> size end)
    |> Enum.drop(1)
    |> List.first()
    |> elem(2)
  end

  defp move({direction, steps} = _move, {x, y, prevsteps} = _pos) do
    case direction do
      "R" -> {{x+steps, y, prevsteps + steps}, (for step <- 0..steps, do: {x+step, y, prevsteps+step})}
      "L" -> {{x-steps, y, prevsteps + steps}, (for step <- 0..steps, do: {x-step, y, prevsteps+step})}
      "U" -> {{x, y+steps, prevsteps + steps}, (for step <- 0..steps, do: {x, y+step, prevsteps+step})}
      "D" -> {{x, y-steps, prevsteps + steps}, (for step <- 0..steps, do: {x, y-step, prevsteps+step})}
    end
  end

  defp path(moves, pos \\ {0, 0, 0}, already \\ [])

  defp path([], _endpos, fullpath), do: fullpath

  defp path([firstmove | moves], pos, alreadypath) do
    {newpos, wirepath} = move(firstmove, pos)
    path(moves, newpos, alreadypath ++ wirepath)
  end

  defp distance({x, y} = _pos), do: abs(x) + abs(y)

  def input(path \\ "input.txt") do
    File.read!(path)
    |> String.split()
    |> Enum.map(&String.split(&1, ","))
    |> Enum.map(&Enum.map(&1,   # ugly
        fn x ->
          String.split_at(x, 1)
          |> fn {dir, steps} -> {dir, String.to_integer(steps, 10)} end.() end))
  end
end

# String.split_at(r, 1) |> fn {dir, steps} -> {dir, String.to_integer(steps, 10)} end.()

# final = Day03.path(hd(Day03.input("/tmp/3")), {0, 0})
# elem(final, 1) |> Enum.reduce(%{}, fn x, acc -> Map.put(acc, x, 0) end)
# Day03.input("/tmp/3") |> Enum.with_index |> Enum.map(fn {moves, index} -> index end)

# Day03.input("/tmp/3") |> Enum.with_index() |> Enum.map(fn {moves, index} -> Day03.path(moves, index) end)
# MapSet.intersection(MapSet.new(ki0), MapSet.new(ki1)) |> MapSet.to_list() |> Enum.drop(1)

# |> Enum.map(fn path -> Map.keys(path) |> Enum.map(fn {x, y, _steps} -> {x, y} end) end)
# a |> Enum.map(fn {lastpos, path} -> MapSet.new(Map.keys(path)) end)

#     |> Enum.map(fn {_lastpos, path} -> MapSet.new(Map.keys(path)) end)

# IO.puts(Day02.part1())
# IO.puts(Day02.part2())

# run as: elixir day02.exs or iex day02.exs (interactive)
